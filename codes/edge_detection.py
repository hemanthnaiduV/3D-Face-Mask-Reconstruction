# -*- coding: utf-8 -*-
"""Edge_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kdZxtigthL98R_XNP7RK-ZfHVu57pe9n
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def preprocess_image(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 1.5)
    return blur

def overlap_canny_sobel(image):
    # Canny
    edges_canny = cv2.Canny(image, 50, 150)

    # Sobel
    sobelx = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    sobely = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    edges_sobel = cv2.convertScaleAbs(np.hypot(sobelx, sobely))

    # Overlap using pixel-wise max
    overlapped = np.maximum(edges_canny, edges_sobel)

    return {
        'Canny': edges_canny,
        'Sobel': edges_sobel,
        'Overlapped': overlapped
    }

def visualize_all(edges_dict):
    plt.figure(figsize=(12, 6))
    for i, (title, edge_map) in enumerate(edges_dict.items()):
        plt.subplot(1, 3, i+1)
        plt.imshow(edge_map, cmap='gray')
        plt.title(title)
        plt.axis('off')
    plt.tight_layout()
    plt.show()

#if you are using colab use this otherwise change the below code to take the input.
from google.colab import files
uploaded = files.upload()

for fn in uploaded.keys():
    image = cv2.imread(fn)
    processed = preprocess_image(image)
    edges = overlap_canny_sobel(processed)
    visualize_all(edges)